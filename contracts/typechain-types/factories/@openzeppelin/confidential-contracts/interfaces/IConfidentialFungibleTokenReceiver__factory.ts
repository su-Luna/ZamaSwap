/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IConfidentialFungibleTokenReceiver,
  IConfidentialFungibleTokenReceiverInterface,
} from "../../../../@openzeppelin/confidential-contracts/interfaces/IConfidentialFungibleTokenReceiver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "euint64",
        name: "amount",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onConfidentialTransferReceived",
    outputs: [
      {
        internalType: "ebool",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IConfidentialFungibleTokenReceiver__factory {
  static readonly abi = _abi;
  static createInterface(): IConfidentialFungibleTokenReceiverInterface {
    return new Interface(_abi) as IConfidentialFungibleTokenReceiverInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IConfidentialFungibleTokenReceiver {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IConfidentialFungibleTokenReceiver;
  }
}
